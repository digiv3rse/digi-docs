"use strict";(self.webpackChunkdigi_docusaurus_v_1=self.webpackChunkdigi_docusaurus_v_1||[]).push([[1077],{5680:(e,t,r)=>{r.d(t,{xA:()=>d,yg:()=>g});var n=r(6540);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},d=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(r),m=i,g=p["".concat(l,".").concat(m)]||p[m]||u[m]||a;return r?n.createElement(g,o(o({ref:t},d),{},{components:r})):n.createElement(g,o({ref:t},d))}));function g(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4237:(e,t,r)=>{r.r(t),r.d(t,{contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var n=r(8168),i=(r(6540),r(5680)),a=r(6460);const o={id:"img-config",title:"Image Configuration"},s=void 0,l={unversionedId:"smart-contracts/nouns-builder/img-config",id:"smart-contracts/nouns-builder/img-config",isDocsHomePage:!1,title:"Image Configuration",description:"Configuring the NFTs Images",source:"@site/docs/smart-contracts/nouns-builder/img-config.mdx",sourceDirName:"smart-contracts/nouns-builder",slug:"/smart-contracts/nouns-builder/img-config",permalink:"/docs/smart-contracts/nouns-builder/img-config",editUrl:"https://github.com/digiv3rse/digi-docs/blob/main/docs/smart-contracts/nouns-builder/img-config.mdx",version:"current",frontMatter:{id:"img-config",title:"Image Configuration"},sidebar:"nounsbuilder",previous:{title:"Introduction",permalink:"/docs/smart-contracts/nouns-builder/intro"},next:{title:"Creating a DAO",permalink:"/docs/smart-contracts/nouns-builder/creating"}},c=[{value:"Image Requirements",id:"image-requirements",children:[]},{value:"Properties vs Items",id:"properties-vs-items",children:[]},{value:"Seed Generation",id:"seed-generation",children:[]},{value:"Adding Properties",id:"adding-properties",children:[]}],d={toc:c},p="wrapper";function u(e){let{components:t,...r}=e;return(0,i.yg)(p,(0,n.A)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("h5",{id:"configuring-the-nfts-images"},"Configuring the NFTs Images"),(0,i.yg)("hr",null),(0,i.yg)("p",null,"Every time an auction is started a new NFT image is randomly generated.\nThese properties are first set when the DAO is created by providing a folder of artwork layers.\nNote, that the properties for the DAO NFTs are stored in a single folder on IPFS and then randomly generated using the image properties."),(0,i.yg)("p",null,"Check out the ",(0,i.yg)("a",{parentName:"p",href:"https://www.figma.com/community/file/1166768320345172833"},"Example Artwork Toolkit")," to learn more about formatting the art for the DAO NFTs."),(0,i.yg)("h3",{id:"image-requirements"},"Image Requirements"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Maximum of 500 files"),(0,i.yg)("li",{parentName:"ul"},"PNG and SVG are the only supported file types"),(0,i.yg)("li",{parentName:"ul"},"600px x 600px minimum for PNGs and 32px minimum for SVGs"),(0,i.yg)("li",{parentName:"ul"},"Images must be square")),(0,i.yg)("h3",{id:"properties-vs-items"},"Properties vs Items"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"Properties:")," Categories of different traits for the DAO NFTs "),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"Items:")," Distinct images that make up a property")),(0,i.yg)("img",{class:"guide-photos",src:a.A,alt:"builder-proterties"}),(0,i.yg)("br",null),(0,i.yg)("h3",{id:"seed-generation"},"Seed Generation"),(0,i.yg)("p",null,"The seed is used to create a random combination of properties for the DAO NFTs.\nIt is generated in the ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/digiv3rse/nouns-protocol/blob/main/src/token/metadata/MetadataRenderer.sol#L279"},"Metadata Render Contract")," by calling ",(0,i.yg)("inlineCode",{parentName:"p"},"_generateSeed")," with the current tokenId and salting the hash with block data."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"function _generateSeed(uint256 _tokenId) private view returns (uint256) {\n    return uint256(keccak256(abi.encode(_tokenId, blockhash(block.number), block.coinbase, block.timestamp)));\n}\n")),(0,i.yg)("h3",{id:"adding-properties"},"Adding Properties"),(0,i.yg)("p",null,"Once the properties have been uploaded to IPFS they then need to be added to the metadata render by calling ",(0,i.yg)("inlineCode",{parentName:"p"},"addProperties"),"."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"/// @notice Adds properties and/or items to be pseudo-randomly chosen from during token minting\n/// @param _names The names of the properties to add\n/// @param _items The items to add to each property\n/// @param _ipfsGroup The IPFS base URI and extension\nfunction addProperties(\n    string[] calldata _names,\n    ItemParam[] calldata _items,\n    IPFSGroup calldata _ipfsGroup\n) external onlyOwner\n")))}u.isMDXComponent=!0},6460:(e,t,r)=>{r.d(t,{A:()=>n});const n=r.p+"assets/images/builderProperties-1c513bee2d1b3cfb6bb0a07506f8d317.png"}}]);