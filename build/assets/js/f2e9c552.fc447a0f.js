"use strict";(self.webpackChunkdigi_docusaurus_v_1=self.webpackChunkdigi_docusaurus_v_1||[]).push([[1232],{5680:(n,e,t)=>{t.d(e,{xA:()=>u,yg:()=>g});var a=t(6540);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,a,r=function(n,e){if(null==n)return{};var t,a,r={},o=Object.keys(n);for(a=0;a<o.length;a++)t=o[a],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(a=0;a<o.length;a++)t=o[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var c=a.createContext({}),s=function(n){var e=a.useContext(c),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},u=function(n){var e=s(n.components);return a.createElement(c.Provider,{value:e},n.children)},d="mdxType",p={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},y=a.forwardRef((function(n,e){var t=n.components,r=n.mdxType,o=n.originalType,c=n.parentName,u=l(n,["components","mdxType","originalType","parentName"]),d=s(t),y=r,g=d["".concat(c,".").concat(y)]||d[y]||p[y]||o;return t?a.createElement(g,i(i({ref:e},u),{},{components:t})):a.createElement(g,i({ref:e},u))}));function g(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var o=t.length,i=new Array(o);i[0]=y;var l={};for(var c in e)hasOwnProperty.call(e,c)&&(l[c]=e[c]);l.originalType=n,l[d]="string"==typeof n?n:r,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}y.displayName="MDXCreateElement"},6982:(n,e,t)=>{t.d(e,{A:()=>r});var a=t(6540);const r=function(n){let{children:e,hidden:t,className:r}=n;return a.createElement("div",{role:"tabpanel",hidden:t,className:r},e)}},1931:(n,e,t)=>{t.d(e,{A:()=>d});var a=t(6540),r=t(8555);const o=function(){const n=(0,a.useContext)(r.A);if(null==n)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return n};var i=t(53);const l="tabItem_vU9c",c="tabItemActive_cw6a";const s=37,u=39;const d=function(n){const{lazy:e,block:t,defaultValue:r,values:d,groupId:p,className:y}=n,{tabGroupChoices:g,setTabGroupChoices:m}=o(),[h,b]=(0,a.useState)(r),v=a.Children.toArray(n.children),f=[];if(null!=p){const n=g[p];null!=n&&n!==h&&d.some((e=>e.value===n))&&b(n)}const T=n=>{const e=n.currentTarget,t=f.indexOf(e),a=d[t].value;b(a),null!=p&&(m(p,a),setTimeout((()=>{(function(n){const{top:e,left:t,bottom:a,right:r}=n.getBoundingClientRect(),{innerHeight:o,innerWidth:i}=window;return e>=0&&r<=i&&a<=o&&t>=0})(e)||(e.scrollIntoView({block:"center",behavior:"smooth"}),e.classList.add(c),setTimeout((()=>e.classList.remove(c)),2e3))}),150))},w=n=>{let e;switch(n.keyCode){case u:{const t=f.indexOf(n.target)+1;e=f[t]||f[0];break}case s:{const t=f.indexOf(n.target)-1;e=f[t]||f[f.length-1];break}}e?.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":t},y)},d.map((n=>{let{value:e,label:t}=n;return a.createElement("li",{role:"tab",tabIndex:h===e?0:-1,"aria-selected":h===e,className:(0,i.A)("tabs__item",l,{"tabs__item--active":h===e}),key:e,ref:n=>f.push(n),onKeyDown:w,onFocus:T,onClick:T},t)}))),e?(0,a.cloneElement)(v.filter((n=>n.props.value===h))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},v.map(((n,e)=>(0,a.cloneElement)(n,{key:e,hidden:n.props.value!==h})))))}},8555:(n,e,t)=>{t.d(e,{A:()=>a});const a=(0,t(6540).createContext)(void 0)},4107:(n,e,t)=>{t.r(e),t.d(e,{contentTitle:()=>s,default:()=>g,frontMatter:()=>c,metadata:()=>u,toc:()=>d});var a=t(8168),r=(t(6540),t(5680)),o=t(1931),i=t(6982);const l=t.p+"assets/images/supply-owner-count-2afd197856d9d96450554f36c16dc8ed.png",c={id:"api-collection-data",title:"Getting Collection Data"},s=void 0,u={unversionedId:"guides/api-collection-data",id:"guides/api-collection-data",isDocsHomePage:!1,title:"Getting Collection Data",description:"Use the DiGi API to get NFT collection data",source:"@site/docs/guides/api-collection-data.mdx",sourceDirName:"guides",slug:"/guides/api-collection-data",permalink:"/build/index.html/docs/guides/api-collection-data",editUrl:"https://github.com/digiv3rse/digi-docs/blob/main/docs/guides/api-collection-data.mdx",version:"current",frontMatter:{id:"api-collection-data",title:"Getting Collection Data"},sidebar:"api",previous:{title:"Getting NFTs for an Address",permalink:"/build/index.html/docs/guides/api-address-balance"},next:{title:"Using the DDK",permalink:"/build/index.html/docs/guides/ddk-intro-guide"}},d=[{value:"Getting a Collection Preview",id:"getting-a-collection-preview",children:[]},{value:"Collection Stats",id:"collection-stats",children:[]},{value:"Minting History",id:"minting-history",children:[]},{value:"Highest Sales",id:"highest-sales",children:[]},{value:"Top Holders",id:"top-holders",children:[]},{value:"Preview Tokens in a Collection",id:"preview-tokens-in-a-collection",children:[]},{value:"Getting Stats on Attributes",id:"getting-stats-on-attributes",children:[]},{value:"Search Collection by Keyword",id:"search-collection-by-keyword",children:[]}],p={toc:d},y="wrapper";function g(n){let{components:e,...t}=n;return(0,r.yg)(y,(0,a.A)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,r.yg)("h5",{id:"use-the-digi-api-to-get-nft-collection-data"},"Use the DiGi API to get NFT collection data"),(0,r.yg)("hr",null),(0,r.yg)("p",null,"This guide will cover how to retrieve NFT collection data for ",(0,r.yg)("a",{parentName:"p",href:"https://digiv3rse.xyz/collections/0xc729Ce9bF1030fbb639849a96fA8BBD013680B64"},"Monarchs"),".",(0,r.yg)("br",{parentName:"p"}),"\n","Data can be retrieved for any collection by using these queries and updating the ",(0,r.yg)("inlineCode",{parentName:"p"},"collectionAddress"),"."),(0,r.yg)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("p",{parentName:"div"},"GraphiQL Playground: ",(0,r.yg)("a",{parentName:"p",href:"https://api.digiv3rse.xyz/graphql"},"https://api.digiv3rse.xyz/graphql")),(0,r.yg)("p",{parentName:"div"},"Monarchs Contract: ",(0,r.yg)("inlineCode",{parentName:"p"},"0xc729Ce9bF1030fbb639849a96fA8BBD013680B64")),(0,r.yg)("p",{parentName:"div"},"A collection is a group of NFTs that all share a single contract."))),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"getting-a-collection-preview"},"Getting a Collection Preview"),(0,r.yg)("p",null,"First off, we can begin by getting a preview of Monarchs by using the ",(0,r.yg)("inlineCode",{parentName:"p"},"collections")," query.\nThis query can fetch data for either multiple NFT collections or a specific collection. "),(0,r.yg)(o.A,{defaultValue:"query",values:[{label:"Query",value:"query"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,r.yg)(i.A,{value:"query",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-graphql"},'query CollectionInfo {\n  collections(networks: [{network: ETHEREUM, chain: MAINNET}], \n              pagination: {limit: 8}, \n              sort: {sortKey: CREATED, sortDirection: ASC},\n              where: {collectionAddresses: "0xc729Ce9bF1030fbb639849a96fA8BBD013680B64"}) \n  {\n    nodes {\n      address\n      name\n      symbol\n      totalSupply\n    }\n  }\n}\n\n'))),(0,r.yg)(i.A,{value:"response",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "collections": {\n      "nodes": [\n        {\n          "address": "0xc729ce9bf1030fbb639849a96fa8bbd013680b64",\n          "name": "Monarchs",\n          "symbol": "MONARCH",\n          "totalSupply": 888\n        }\n      ]\n    }\n  }\n}\n')))),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"collection-stats"},"Collection Stats"),(0,r.yg)("p",null,"Now let's look at a few general collection stats for Monarchs.\nBelow we are using the ",(0,r.yg)("inlineCode",{parentName:"p"},"aggregateStat")," query to get the information we need."),(0,r.yg)("img",{class:"guide-photos",src:l,alt:"ownerCount",width:"400px"}),(0,r.yg)("br",null),(0,r.yg)("p",null,"We can see that 888 total Monarchs that are held by 600 different addresses\nand the collection has done over 2251 ETH (",(0,r.yg)("inlineCode",{parentName:"p"},"chainTokenPrice"),") in sales volume across all markets."),(0,r.yg)(o.A,{defaultValue:"query",values:[{label:"Query",value:"query"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,r.yg)(i.A,{value:"query",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-graphql"},'query MonarchCollectionStats {\n  aggregateStat {\n    nftCount(where: {collectionAddresses: "0xc729Ce9bF1030fbb639849a96fA8BBD013680B64"})\n    ownerCount(where: {collectionAddresses: "0xc729Ce9bF1030fbb639849a96fA8BBD013680B64"})\n    salesVolume(where: {collectionAddresses: ["0x335eeef8e93a7a757d9e7912044d9cd264e2b2d8"]}, networks: [{network: ETHEREUM, chain: MAINNET}]) {\n      usdcPrice\n      totalCount\n      chainTokenPrice\n    }\n  }\n}\n\n'))),(0,r.yg)(i.A,{value:"response",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "aggregateStat": {\n      "nftCount": 888,\n      "ownerCount": 600,\n      "salesVolume": {\n        "usdcPrice": 6944078.373988687,\n        "totalCount": 12636,\n        "chainTokenPrice": 2255.048171858962\n      }\n    }\n  }\n}\n')))),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"minting-history"},"Minting History"),(0,r.yg)("p",null,"Next, let's look at the first NFT that was ever minted from this collection.\nWe can see that it was minted on ",(0,r.yg)("a",{parentName:"p",href:"https://etherscan.io/tx/0x0d5bfe26cacd6a9b678427f4aca229204d758757478246bc766c7e3844f9be1a"},"November 6th, 2021 for 0 ETH"),".\nA deeper dive will tell you that this is the creator's wallet and they were able to mint the first 20 Monarchs for free."),(0,r.yg)(o.A,{defaultValue:"query",values:[{label:"Query",value:"query"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,r.yg)(i.A,{value:"query",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-graphql"},'query FirstMonarchMinted {\n  mints(where: {collectionAddresses: "0xc729Ce9bF1030fbb639849a96fA8BBD013680B64"}, \n        pagination: {limit: 1}, \n        sort: {sortKey: TIME, \n        sortDirection: ASC}) {\n    nodes {\n      token {\n        tokenId\n        owner\n        mintInfo {\n          originatorAddress\n          price {\n            chainTokenPrice {\n              decimal\n            }\n          }\n          mintContext {\n            transactionHash\n            blockTimestamp\n          }\n        }\n      }\n    }\n  }\n}\n'))),(0,r.yg)(i.A,{value:"response",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "mints": {\n      "nodes": [\n        {\n          "token": {\n            "tokenId": "0",\n            "owner": "0x1d14d9e297dfbce003f5a8ebcf8cba7faee70b91",\n            "mintInfo": {\n              "originatorAddress": "0x4628d77ba8fcc7a7f2b6bd4a0363061a06e7a20f",\n              "price": {\n                "chainTokenPrice": {\n                  "decimal": 0\n                }\n              },\n              "mintContext": {\n                "transactionHash": "0x0d5bfe26cacd6a9b678427f4aca229204d758757478246bc766c7e3844f9be1a",\n                "blockTimestamp": "2021-10-06T15:55:44"\n              }\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n')))),(0,r.yg)("br",null),(0,r.yg)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("p",{parentName:"div"},"One thing to call out is that sometimes collections will airdrop their tokens to people to trick certain interfaces into making it look like that address minted from the collection.\nA way to prevent this is to compare the ",(0,r.yg)("inlineCode",{parentName:"p"},"originatorAddress")," with the ",(0,r.yg)("inlineCode",{parentName:"p"},"toAddress"),"."),(0,r.yg)("p",{parentName:"div"},"The ",(0,r.yg)("inlineCode",{parentName:"p"},"originatorAddress")," is the address that submitted the transaction and the ",(0,r.yg)("inlineCode",{parentName:"p"},"toAddress")," is the address where the minted NFT was sent to in the transaction."))),(0,r.yg)("p",null,"However, if we set the ",(0,r.yg)("inlineCode",{parentName:"p"},"tokenId")," in ",(0,r.yg)("inlineCode",{parentName:"p"},"where")," to 20 we can view the 21st Monarch minted and see that it was ",(0,r.yg)("a",{parentName:"p",href:"https://etherscan.io/tx/0x07d236e70c1647f1d8504df7ea74435c01b276e2effe54b1df463a2ea7c76235"},"minted for 0.8 ETH"),"."),(0,r.yg)(o.A,{defaultValue:"query",values:[{label:"Query",value:"query"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,r.yg)(i.A,{value:"query",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-graphql"},'query TwentyFirstMonarchMinted {\n  mints(where: \n        {tokens: {address: "0xc729Ce9bF1030fbb639849a96fA8BBD013680B64", tokenId: "20"}}, \n        pagination: {limit: 1}, \n        sort: {sortKey: TIME, sortDirection: ASC}) {\n    nodes {\n      token {\n        tokenId\n        owner\n        mintInfo {\n          originatorAddress\n          price {\n            nativePrice {\n              decimal\n            }\n          }\n          mintContext {\n            transactionHash\n            blockTimestamp\n          }\n        }\n      }\n    }\n  }\n}\n\n'))),(0,r.yg)(i.A,{value:"response",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "mints": {\n      "nodes": [\n        {\n          "token": {\n            "tokenId": "20",\n            "owner": "0x79bc543be01d2b346d659fa69bb25c73436ffa05",\n            "mintInfo": {\n              "originatorAddress": "0x79bc543be01d2b346d659fa69bb25c73436ffa05",\n              "price": {\n                "nativePrice": {\n                  "decimal": 0.8\n                }\n              },\n              "mintContext": {\n                "transactionHash": "0x07d236e70c1647f1d8504df7ea74435c01b276e2effe54b1df463a2ea7c76235",\n                "blockTimestamp": "2021-10-06T16:00:17"\n              }\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n')))),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"highest-sales"},"Highest Sales"),(0,r.yg)("p",null,"By using the ",(0,r.yg)("inlineCode",{parentName:"p"},"sales")," query and sorting by descending ",(0,r.yg)("inlineCode",{parentName:"p"},"ETH_PRICE")," we can see the largest sales for Monarchs.\nWe can see that the largest sale was ",(0,r.yg)("a",{parentName:"p",href:"https://etherscan.io/tx/0xf0179b678809acff8535ad89338bc7fa8a87d28cc10f07c7e595ef823b0e4690"},"tokenId 624 for 8.88 ETH on October 6th, 2021"),"."),(0,r.yg)(o.A,{defaultValue:"query",values:[{label:"Query",value:"query"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,r.yg)(i.A,{value:"query",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-graphql"},'query TopMonarchSales {\n  sales(where: {collectionAddresses: "0xc729Ce9bF1030fbb639849a96fA8BBD013680B64"}, pagination: {limit: 3}, sort: {sortKey: NATIVE_PRICE, sortDirection: DESC}) {\n    nodes {\n      sale {\n        saleType\n        saleContractAddress\n        buyerAddress\n        sellerAddress\n        tokenId\n        transactionInfo {\n          blockTimestamp\n          transactionHash\n        }\n        price {\n          usdcPrice {\n            decimal\n          }\n          nativePrice {\n            decimal\n          }\n        }\n      }\n    }\n  }\n}\n\n'))),(0,r.yg)(i.A,{value:"response",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "sales": {\n      "nodes": [\n        {\n          "sale": {\n            "saleType": "OPENSEA_SINGLE_SALE",\n            "saleContractAddress": "0x7be8076f4ea4a4ad08075c2508e481d6c946d12b",\n            "buyerAddress": "0xc89a6f24b352d35e783ae7c330462a3f44242e89",\n            "sellerAddress": "0x040fc4f814321242c4e19114cfd7493bebb3b121",\n            "tokenId": "624",\n            "transactionInfo": {\n              "blockTimestamp": "2021-10-06T17:30:36",\n              "transactionHash": "0xf0179b678809acff8535ad89338bc7fa8a87d28cc10f07c7e595ef823b0e4690"\n            },\n            "price": {\n              "usdcPrice": {\n                "decimal": 31729.60193029824\n              },\n              "nativePrice": {\n                "decimal": 8.88\n              }\n            }\n          }\n        },\n        {\n          "sale": {\n            "saleType": "OPENSEA_SINGLE_SALE",\n            "saleContractAddress": "0x7be8076f4ea4a4ad08075c2508e481d6c946d12b",\n            "buyerAddress": "0x7ae920bef29c849415635b1b97f1ceb33dca89b6",\n            "sellerAddress": "0x63035f1421fd4292c3f802cccf3060a4b94dcace",\n            "tokenId": "865",\n            "transactionInfo": {\n              "blockTimestamp": "2021-10-06T19:38:45",\n              "transactionHash": "0xa24328cc093d38e61d6bc0b53f5543d081c6fa4e3e9387ecc2dca427d831c23f"\n            },\n            "price": {\n              "usdcPrice": {\n                "decimal": 27832.857309572228\n              },\n              "nativePrice": {\n                "decimal": 7.77\n              }\n            }\n          }\n        },\n        {\n          "sale": {\n            "saleType": "OPENSEA_SINGLE_SALE",\n            "saleContractAddress": "0x7be8076f4ea4a4ad08075c2508e481d6c946d12b",\n            "buyerAddress": "0xa9a1b8c4ee2cf76e8b22c5dad3976d269e4050e5",\n            "sellerAddress": "0x50d6102774fe54dd7d073a27f45dffacb51fa667",\n            "tokenId": "887",\n            "transactionInfo": {\n              "blockTimestamp": "2021-10-06T18:58:48",\n              "transactionHash": "0x89786c7c2e1e113f43a919dcecb3b9270d1526b3fc629ead4a1ccccc9e0b6537"\n            },\n            "price": {\n              "usdcPrice": {\n                "decimal": 24736.902321472273\n              },\n              "nativePrice": {\n                "decimal": 6.9\n              }\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n')))),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"top-holders"},"Top Holders"),(0,r.yg)("p",null,"We can view who the Monarch whales are by using ",(0,r.yg)("inlineCode",{parentName:"p"},"ownersByCount")," on ",(0,r.yg)("inlineCode",{parentName:"p"},"aggregateStat"),".\nThis will order the addresses that hold the most NFTs of a collection in descending order."),(0,r.yg)(o.A,{defaultValue:"query",values:[{label:"Query",value:"query"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,r.yg)(i.A,{value:"query",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-graphql"},'query TopHolders {\n  aggregateStat {\n    ownersByCount(where: {collectionAddresses: "0xc729Ce9bF1030fbb639849a96fA8BBD013680B64"}, \n                  pagination: {limit: 5}) {\n      nodes {\n        owner\n        count\n      }\n    }\n  }\n}\n'))),(0,r.yg)(i.A,{value:"response",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "aggregateStat": {\n      "ownersByCount": {\n        "nodes": [\n          {\n            "owner": "0x7ae920bef29c849415635b1b97f1ceb33dca89b6",\n            "count": 65\n          },\n          {\n            "owner": "0x8bace3a49a375027868cdd34e84521eed1f1b01d",\n            "count": 16\n          },\n          {\n            "owner": "0xc78b646d26f73ae8428c49d0e94cc50b1525388a",\n            "count": 13\n          },\n          {\n            "owner": "0x4628d77ba8fcc7a7f2b6bd4a0363061a06e7a20f",\n            "count": 10\n          },\n          {\n            "owner": "0x7b4a5410713fe715312d4bb99b30ab00f045f2f4",\n            "count": 9\n          }\n        ]\n      }\n    }\n  }\n}\n')))),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"preview-tokens-in-a-collection"},"Preview Tokens in a Collection"),(0,r.yg)("p",null,"Here we are able to get a list of NFTs within the Monarchs collection.\nYou are able to make the preview as simple or complex as you would like.\nIn this example we are getting 3 tokens from the collection using the ",(0,r.yg)("inlineCode",{parentName:"p"},"tokens")," query and returning all the metadata for each token."),(0,r.yg)(o.A,{defaultValue:"query",values:[{label:"Query",value:"query"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,r.yg)(i.A,{value:"query",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-graphql"},'query PreviewTokens {\n  tokens(networks: [{network: ETHEREUM, chain: MAINNET}], \n         pagination: {limit: 3}, \n         sort: {sortKey: MINTED, sortDirection: ASC}, \n         where: {collectionAddresses: ["0xc729Ce9bF1030fbb639849a96fA8BBD013680B64"]}) \n  {\n    nodes {\n      token {\n        collectionAddress\n        tokenId\n        name\n        tokenUrl\n        metadata\n      }\n    }\n  }\n}\n\n'))),(0,r.yg)(i.A,{value:"response",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "tokens": {\n      "nodes": [\n        {\n          "token": {\n            "collectionAddress": "0xc729ce9bf1030fbb639849a96fa8bbd013680b64",\n            "tokenId": "0",\n            "name": "Monarch #1",\n            "tokenUrl": "ipfs://QmXuEFJVjQrHX7GRWY2WnbUP59re3WsyDLZoKqXvRPSxBY/0",\n            "metadata": {\n              "name": "Monarch #1",\n              "description": "Monarchs is a limited edition series of generative butterfly NFTs by Eric Hu and Roy Tatum. Viewable as both still and moving image, each artwork features a unique one-of-a-kind butterfly with varying wing shapes, colors, bodies, and patterns\u2014some traits much less common than others.",\n              "tokenId": 0,\n              "image": "https://gateway.pinata.cloud/ipfs/QmYBY9R9YDZNyx7eSSA99vZynyyuwwYxHoBZSYtEuVsSd3",\n              "animation_url": "https://gateway.pinata.cloud/ipfs/QmdSBDJz88EWUu6Hg2BJA6PghN8iM4L3N4VEJ3QmoLkaJu",\n              "external_url": "https://www.monarchs.art",\n              "attributes": [\n                {\n                  "trait_type": "Environment",\n                  "value": "Pony"\n                },\n                {\n                  "trait_type": "Base Pattern",\n                  "value": "Shinzaemon"\n                },\n                {\n                  "trait_type": "Secondary Pattern",\n                  "value": "Krakow"\n                },\n                {\n                  "trait_type": "Wing Shape",\n                  "value": "Osman"\n                },\n                {\n                  "trait_type": "Body Type",\n                  "value": "Qing"\n                }\n              ]\n            }\n          }\n        },\n        {\n          "token": {\n            "collectionAddress": "0xc729ce9bf1030fbb639849a96fa8bbd013680b64",\n            "tokenId": "1",\n            "name": "Monarch #2",\n            "tokenUrl": "ipfs://QmXuEFJVjQrHX7GRWY2WnbUP59re3WsyDLZoKqXvRPSxBY/1",\n            "metadata": {\n              "name": "Monarch #2",\n              "description": "Monarchs is a limited edition series of generative butterfly NFTs by Eric Hu and Roy Tatum. Viewable as both still and moving image, each artwork features a unique one-of-a-kind butterfly with varying wing shapes, colors, bodies, and patterns\u2014some traits much less common than others.",\n              "tokenId": 1,\n              "image": "https://gateway.pinata.cloud/ipfs/QmXxgX5Qyhqz1t9wDFkvJtjVKYe1f8Uj714RV2n1LS76Pg",\n              "animation_url": "https://gateway.pinata.cloud/ipfs/QmcDsZSJ4m9SYZCeEE3BbnpsfXCrMV7RJSbinTr3izS2C3",\n              "external_url": "https://www.monarchs.art",\n              "attributes": [\n                {\n                  "trait_type": "Environment",\n                  "value": "Der Zeit"\n                },\n                {\n                  "trait_type": "Base Pattern",\n                  "value": "Dailo"\n                },\n                {\n                  "trait_type": "Secondary Pattern",\n                  "value": "Zeitan"\n                },\n                {\n                  "trait_type": "Wing Shape",\n                  "value": "Suiko"\n                },\n                {\n                  "trait_type": "Body Type",\n                  "value": "Qing"\n                }\n              ]\n            }\n          }\n        },\n        {\n          "token": {\n            "collectionAddress": "0xc729ce9bf1030fbb639849a96fa8bbd013680b64",\n            "tokenId": "2",\n            "name": "Monarch #3",\n            "tokenUrl": "ipfs://QmXuEFJVjQrHX7GRWY2WnbUP59re3WsyDLZoKqXvRPSxBY/2",\n            "metadata": {\n              "name": "Monarch #3",\n              "description": "Monarchs is a limited edition series of generative butterfly NFTs by Eric Hu and Roy Tatum. Viewable as both still and moving image, each artwork features a unique one-of-a-kind butterfly with varying wing shapes, colors, bodies, and patterns\u2014some traits much less common than others.",\n              "tokenId": 2,\n              "image": "https://gateway.pinata.cloud/ipfs/QmNZ5SiMhHSCTeU1UfDJ3GMpwmrwDdSq9qWMwa1K2JQ2hr",\n              "animation_url": "https://gateway.pinata.cloud/ipfs/QmUu8wBnue5d4DnhGmrGJwQPxGj9QuFf8a66W8XYU9Mwiu",\n              "external_url": "https://www.monarchs.art",\n              "attributes": [\n                {\n                  "trait_type": "Environment",\n                  "value": "Donatello"\n                },\n                {\n                  "trait_type": "Base Pattern",\n                  "value": "Katana"\n                },\n                {\n                  "trait_type": "Secondary Pattern",\n                  "value": "Nero"\n                },\n                {\n                  "trait_type": "Wing Shape",\n                  "value": "Mary"\n                },\n                {\n                  "trait_type": "Body Type",\n                  "value": "Mothma"\n                }\n              ]\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n')))),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"getting-stats-on-attributes"},"Getting Stats on Attributes"),(0,r.yg)("p",null,"Viewing the distribution of attributes can be done by using the ",(0,r.yg)("inlineCode",{parentName:"p"},"aggregateAttributes")," query.\nThis will return the value, percent, and count for every attribute if provided by the NFT.\nNote, that some on-chain NFTs don't have attributes directly in their metadata."),(0,r.yg)(o.A,{defaultValue:"query",values:[{label:"Query",value:"query"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,r.yg)(i.A,{value:"query",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-graphql"},'query AggregateAttributesByCollectionAddress {\n  aggregateAttributes(\n        where: {collectionAddresses: ["0xc729Ce9bF1030fbb639849a96fA8BBD013680B64"], \n    }, \n        networks: [{network: ETHEREUM, chain: MAINNET}]\n    ) {\n    traitType\n    valueMetrics {\n      count\n      percent\n      value\n    }\n  }\n}\n'))),(0,r.yg)(i.A,{value:"response",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "aggregateAttributes": [\n      {\n        "traitType": "Environment",\n        "valueMetrics": [\n          {\n            "count": 26,\n            "percent": 10.12,\n            "value": "Pony"\n          },\n          {\n            "count": 6,\n            "percent": 2.33,\n            "value": "Ridley"\n          },\n          {\n            "count": 11,\n            "percent": 4.28,\n            "value": "Zeitung"\n          },\n          {\n            "count": 5,\n            "percent": 1.95,\n            "value": "Eden"\n          },\n          {\n            "count": 13,\n            "percent": 5.06,\n            "value": "Donatello"\n          },\n          {\n            "count": 20,\n            "percent": 7.78,\n            "value": "Sort"\n          },\n          {\n            "count": 27,\n            "percent": 10.51,\n            "value": "Compile"\n          },\n          {\n            "count": 2,\n            "percent": 0.78,\n            "value": "Moonlight"\n          },\n          {\n            "count": 7,\n            "percent": 2.72,\n            "value": "New World"\n          },\n          {\n            "count": 3,\n            "percent": 1.17,\n            "value": "Moonlight Forest"\n          },\n          {\n            "count": 11,\n            "percent": 4.28,\n            "value": "Nuclei Fire"\n          },\n          {\n            "count": 8,\n            "percent": 3.11,\n            "value": "Mule"\n          },\n          {\n            "count": 13,\n            "percent": 5.06,\n            "value": "Nuclei Purple"\n          },\n          {\n            "count": 4,\n            "percent": 1.56,\n            "value": "Circle"\n          },\n          {\n            "count": 3,\n            "percent": 1.17,\n            "value": "Acid Rothko"\n          },\n          {\n            "count": 1,\n            "percent": 0.39,\n            "value": "Hybrid"\n          },\n          {\n            "count": 2,\n            "percent": 0.78,\n            "value": "Tada"\n          },\n          {\n            "count": 1,\n            "percent": 0.39,\n            "value": "Dark Forest"\n          },\n          {\n            "count": 4,\n            "percent": 1.56,\n            "value": "Hunter"\n          },\n          {\n            "count": 14,\n            "percent": 5.45,\n            "value": "Nuclei Green"\n          },\n          {\n            "count": 6,\n            "percent": 2.33,\n            "value": "Arrange"\n          },\n          {\n            "count": 5,\n            "percent": 1.95,\n            "value": "Nuclei Ultra"\n          },\n          {\n            "count": 17,\n            "percent": 6.61,\n            "value": "Jupiter"\n          },\n          {\n            "count": 16,\n            "percent": 6.23,\n            "value": "Orbit"\n          },\n          {\n            "count": 7,\n            "percent": 2.72,\n            "value": "Mauve"\n          },\n          {\n            "count": 3,\n            "percent": 1.17,\n            "value": "Zero"\n          },\n          {\n            "count": 3,\n            "percent": 1.17,\n            "value": "Curtain"\n          },\n          {\n            "count": 4,\n            "percent": 1.56,\n            "value": "Dijck"\n          },\n          {\n            "count": 5,\n            "percent": 1.95,\n            "value": "Zeitgeist"\n          },\n          {\n            "count": 6,\n            "percent": 2.33,\n            "value": "Der Zeit"\n          },\n          {\n            "count": 2,\n            "percent": 0.78,\n            "value": "Shen"\n          },\n          {\n            "count": 2,\n            "percent": 0.78,\n            "value": "Nebula"\n          }\n        ]\n      },\n      {\n        "traitType": "Base Pattern",\n        "valueMetrics": [\n          {\n            "count": 38,\n            "percent": 14.79,\n            "value": "Kingdom"\n          },\n          {\n            "count": 29,\n            "percent": 11.28,\n            "value": "Ikarus"\n          },\n          {\n            "count": 12,\n            "percent": 4.67,\n            "value": "Ivalice"\n          },\n          {\n            "count": 22,\n            "percent": 8.56,\n            "value": "Kaneda"\n          },\n          {\n            "count": 16,\n            "percent": 6.23,\n            "value": "Venom"\n          },\n          {\n            "count": 2,\n            "percent": 0.78,\n            "value": "Field"\n          },\n          {\n            "count": 27,\n            "percent": 10.51,\n            "value": "Dailo"\n          },\n          {\n            "count": 19,\n            "percent": 7.39,\n            "value": "Cosmic Horror"\n          },\n          {\n            "count": 16,\n            "percent": 6.23,\n            "value": "Srivatsa"\n          },\n          {\n            "count": 14,\n            "percent": 5.45,\n            "value": "Koichi"\n          },\n          {\n            "count": 4,\n            "percent": 1.56,\n            "value": "Be Not Afraid"\n          },\n          {\n            "count": 14,\n            "percent": 5.45,\n            "value": "Shinzaemon"\n          },\n          {\n            "count": 9,\n            "percent": 3.5,\n            "value": "Kubrick"\n          },\n          {\n            "count": 8,\n            "percent": 3.11,\n            "value": "Jungle"\n          },\n          {\n            "count": 7,\n            "percent": 2.72,\n            "value": "Carnage"\n          },\n          {\n            "count": 9,\n            "percent": 3.5,\n            "value": "Kazumasa"\n          },\n          {\n            "count": 11,\n            "percent": 4.28,\n            "value": "Katana"\n          }\n        ]\n      },\n      {\n        "traitType": "Secondary Pattern",\n        "valueMetrics": [\n          {\n            "count": 29,\n            "percent": 11.28,\n            "value": "Maui"\n          },\n          {\n            "count": 14,\n            "percent": 5.45,\n            "value": "Julien"\n          },\n          {\n            "count": 19,\n            "percent": 7.39,\n            "value": "Zara"\n          },\n          {\n            "count": 20,\n            "percent": 7.78,\n            "value": "Nehemiah"\n          },\n          {\n            "count": 8,\n            "percent": 3.11,\n            "value": "Krakow"\n          },\n          {\n            "count": 24,\n            "percent": 9.34,\n            "value": "Sebastien"\n          },\n          {\n            "count": 12,\n            "percent": 4.67,\n            "value": "Malawi"\n          },\n          {\n            "count": 11,\n            "percent": 4.28,\n            "value": "Cyrus"\n          },\n          {\n            "count": 13,\n            "percent": 5.06,\n            "value": "Droplet"\n          },\n          {\n            "count": 24,\n            "percent": 9.34,\n            "value": "Zeitan"\n          },\n          {\n            "count": 10,\n            "percent": 3.89,\n            "value": "Makeda"\n          },\n          {\n            "count": 14,\n            "percent": 5.45,\n            "value": "Owl"\n          },\n          {\n            "count": 11,\n            "percent": 4.28,\n            "value": "Kuzmickas"\n          },\n          {\n            "count": 3,\n            "percent": 1.17,\n            "value": "Oahu"\n          },\n          {\n            "count": 9,\n            "percent": 3.5,\n            "value": "Nikto"\n          },\n          {\n            "count": 8,\n            "percent": 3.11,\n            "value": "Valhalla"\n          },\n          {\n            "count": 7,\n            "percent": 2.72,\n            "value": "Mehmed"\n          },\n          {\n            "count": 13,\n            "percent": 5.06,\n            "value": "Nero"\n          },\n          {\n            "count": 4,\n            "percent": 1.56,\n            "value": "Kora"\n          },\n          {\n            "count": 2,\n            "percent": 0.78,\n            "value": "Augustus"\n          },\n          {\n            "count": 1,\n            "percent": 0.39,\n            "value": "Anastasia"\n          },\n          {\n            "count": 1,\n            "percent": 0.39,\n            "value": "Lelouch"\n          }\n        ]\n      },\n      {\n        "traitType": "Wing Shape",\n        "valueMetrics": [\n          {\n            "count": 66,\n            "percent": 25.68,\n            "value": "Theodora"\n          },\n          {\n            "count": 24,\n            "percent": 9.34,\n            "value": "Nubis"\n          },\n          {\n            "count": 24,\n            "percent": 9.34,\n            "value": "Victoria"\n          },\n          {\n            "count": 16,\n            "percent": 6.23,\n            "value": "Suiko"\n          },\n          {\n            "count": 18,\n            "percent": 7,\n            "value": "Petrovna"\n          },\n          {\n            "count": 12,\n            "percent": 4.67,\n            "value": "Antoinette"\n          },\n          {\n            "count": 14,\n            "percent": 5.45,\n            "value": "Vallal"\n          },\n          {\n            "count": 24,\n            "percent": 9.34,\n            "value": "Suleiman"\n          },\n          {\n            "count": 6,\n            "percent": 2.33,\n            "value": "Bellucci"\n          },\n          {\n            "count": 7,\n            "percent": 2.72,\n            "value": "Mary"\n          },\n          {\n            "count": 10,\n            "percent": 3.89,\n            "value": "Krimhelde"\n          },\n          {\n            "count": 26,\n            "percent": 10.12,\n            "value": "Osman"\n          },\n          {\n            "count": 8,\n            "percent": 3.11,\n            "value": "Gemma"\n          },\n          {\n            "count": 2,\n            "percent": 0.78,\n            "value": "Lilou"\n          }\n        ]\n      },\n      {\n        "traitType": "Body Type",\n        "valueMetrics": [\n          {\n            "count": 136,\n            "percent": 52.92,\n            "value": "Mothma"\n          },\n          {\n            "count": 51,\n            "percent": 19.84,\n            "value": "Qing"\n          },\n          {\n            "count": 70,\n            "percent": 27.24,\n            "value": "Schmett"\n          }\n        ]\n      }\n    ]\n  }\n}\n')))),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"search-collection-by-keyword"},"Search Collection by Keyword"),(0,r.yg)("p",null,'The DiGi API can find any token or collection that contains a specific keyword.\nIn this case, the query is searching for tokens in the Monarch collection that have the word "Venom".\nWe can see here that "Venom" ends up being a type of ',(0,r.yg)("inlineCode",{parentName:"p"},"Base Pattern")," for Monarchs."),(0,r.yg)(o.A,{defaultValue:"query",values:[{label:"Query",value:"query"},{label:"Response",value:"response"}],mdxType:"Tabs"},(0,r.yg)(i.A,{value:"query",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-graphql"},'query CollectionTextSearch {\n  search(pagination: {limit: 5}, \n         query: {text: "Venom"}, \n         filter: {collectionAddresses: "0xc729Ce9bF1030fbb639849a96fA8BBD013680B64", \n         entityType: TOKEN})\n  {\n    nodes {\n      entity {\n        ... on Token {\n          tokenId\n          owner\n          attributes {\n            traitType\n            value\n          }\n        }\n      }\n    }\n  }\n}\n'))),(0,r.yg)(i.A,{value:"response",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "search": {\n      "nodes": [\n        {\n          "entity": {\n            "tokenId": "117",\n            "owner": "0x09b14b1c8a92bca0cc592a80dc311bf1a3fde9f5",\n            "attributes": [\n              {\n                "traitType": "Environment",\n                "value": "Donatello"\n              },\n              {\n                "traitType": "Base Pattern",\n                "value": "Venom"\n              },\n              {\n                "traitType": "Secondary Pattern",\n                "value": "Krakow"\n              },\n              {\n                "traitType": "Wing Shape",\n                "value": "Suiko"\n              },\n              {\n                "traitType": "Body Type",\n                "value": "Mothma"\n              }\n            ]\n          }\n        },\n        {\n          "entity": {\n            "tokenId": "280",\n            "owner": "0x17b1cb1ad28e8e8b038139e95cf6223ee7e8b572",\n            "attributes": [\n              {\n                "traitType": "Environment",\n                "value": "Compile"\n              },\n              {\n                "traitType": "Base Pattern",\n                "value": "Venom"\n              },\n              {\n                "traitType": "Secondary Pattern",\n                "value": "Nehemiah"\n              },\n              {\n                "traitType": "Wing Shape",\n                "value": "Krimhelde"\n              },\n              {\n                "traitType": "Body Type",\n                "value": "Mothma"\n              }\n            ]\n          }\n        },\n        {\n          "entity": {\n            "tokenId": "285",\n            "owner": "0xa5c2b80bcfa9201df2310a47ded0b282f6b79bee",\n            "attributes": [\n              {\n                "traitType": "Environment",\n                "value": "Curtain"\n              },\n              {\n                "traitType": "Base Pattern",\n                "value": "Venom"\n              },\n              {\n                "traitType": "Secondary Pattern",\n                "value": "Nikto"\n              },\n              {\n                "traitType": "Wing Shape",\n                "value": "Nubis"\n              },\n              {\n                "traitType": "Body Type",\n                "value": "Mothma"\n              }\n            ]\n          }\n        },\n        {\n          "entity": {\n            "tokenId": "620",\n            "owner": "0x954536dacf5860f3c8d4dd0d25b7a85818e08864",\n            "attributes": [\n              {\n                "traitType": "Environment",\n                "value": "Zeitung"\n              },\n              {\n                "traitType": "Base Pattern",\n                "value": "Venom"\n              },\n              {\n                "traitType": "Secondary Pattern",\n                "value": "Zara"\n              },\n              {\n                "traitType": "Wing Shape",\n                "value": "Theodora"\n              },\n              {\n                "traitType": "Body Type",\n                "value": "Mothma"\n              }\n            ]\n          }\n        },\n        {\n          "entity": {\n            "tokenId": "87",\n            "owner": "0x968794b44f79079b10ca33e5584cff591e590461",\n            "attributes": [\n              {\n                "traitType": "Environment",\n                "value": "Compile"\n              },\n              {\n                "traitType": "Base Pattern",\n                "value": "Venom"\n              },\n              {\n                "traitType": "Secondary Pattern",\n                "value": "Malawi"\n              },\n              {\n                "traitType": "Wing Shape",\n                "value": "Gemma"\n              },\n              {\n                "traitType": "Body Type",\n                "value": "Mothma"\n              }\n            ]\n          }\n        }\n      ]\n    }\n  }\n}\n')))),(0,r.yg)("hr",null))}g.isMDXComponent=!0},53:(n,e,t)=>{function a(n){var e,t,r="";if("string"==typeof n||"number"==typeof n)r+=n;else if("object"==typeof n)if(Array.isArray(n))for(e=0;e<n.length;e++)n[e]&&(t=a(n[e]))&&(r&&(r+=" "),r+=t);else for(e in n)n[e]&&(r&&(r+=" "),r+=e);return r}t.d(e,{A:()=>r});const r=function(){for(var n,e,t=0,r="";t<arguments.length;)(n=arguments[t++])&&(e=a(n))&&(r&&(r+=" "),r+=e);return r}}}]);