"use strict";(self.webpackChunkdigi_docusaurus_v_1=self.webpackChunkdigi_docusaurus_v_1||[]).push([[4165],{5680:(e,n,t)=>{t.d(n,{xA:()=>l,yg:()=>f});var r=t(6540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=r.createContext({}),c=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=c(e.components);return r.createElement(d.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=c(t),g=a,f=p["".concat(d,".").concat(g)]||p[g]||u[g]||o;return t?r.createElement(f,i(i({ref:n},l),{},{components:t})):r.createElement(f,i({ref:n},l))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=g;var s={};for(var d in n)hasOwnProperty.call(n,d)&&(s[d]=n[d]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},2755:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var r=t(8168),a=(t(6540),t(5680));const o={id:"useNft",title:"useNFT",sidebar_position:1},i=void 0,s={unversionedId:"developer-tools/nft-hooks/useNft",id:"developer-tools/nft-hooks/useNft",isDocsHomePage:!1,title:"useNFT",description:"Fetches all data for an ERC-721 NFT",source:"@site/docs/developer-tools/nft-hooks/usenft.mdx",sourceDirName:"developer-tools/nft-hooks",slug:"/developer-tools/nft-hooks/useNft",permalink:"/docs/developer-tools/nft-hooks/useNft",editUrl:"https://github.com/digiv3rse/digi-docs/blob/main/docs/developer-tools/nft-hooks/usenft.mdx",version:"current",sidebarPosition:1,frontMatter:{id:"useNft",title:"useNFT",sidebar_position:1},sidebar:"devtools",previous:{title:"Introduction",permalink:"/docs/developer-tools/nft-hooks/intro"},next:{title:"useNFTMetadata",permalink:"/docs/developer-tools/nft-hooks/usenftmetadata"}},d=[{value:"Interface",id:"interface",children:[]},{value:"Response Shape",id:"response-shape",children:[]},{value:"Detailed Response",id:"detailed-response",children:[]},{value:"DDKFetchStrategy",id:"ddkfetchstrategy",children:[]}],c={toc:d},l="wrapper";function p(e){let{components:n,...t}=e;return(0,a.yg)(l,(0,r.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h5",{id:"fetches-all-data-for-an-erc-721-nft"},"Fetches all data for an ERC-721 NFT"),(0,a.yg)("hr",null),(0,a.yg)("p",null,"Fetches data for a given ERC-721 NFT and takes in a ",(0,a.yg)("inlineCode",{parentName:"p"},"contractAddress")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"tokenId"),"."),(0,a.yg)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.yg)("div",{parentName:"div",className:"admonition-heading"},(0,a.yg)("h5",{parentName:"div"},(0,a.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,a.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,a.yg)("div",{parentName:"div",className:"admonition-content"},(0,a.yg)("p",{parentName:"div"},"The same data can be fetched using the base ",(0,a.yg)("a",{parentName:"p",href:"./useNft#ddkfetchstrategy"},(0,a.yg)("inlineCode",{parentName:"a"},"DDKFetchStrategy"))," for server-side or non-React."))),(0,a.yg)("h3",{id:"interface"},"Interface"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"/**\n * @param contractAddress address of the contract, if null and tokenID is passed in, a NFT is assumed\n * @param tokenId id of NFT to fetch blockchain information for\n * @returns useNFTType hook results include NFT data, error, marketError and currencyLoaded.\n */\n\nfunction useNFT(\n  contractAddress?: string,\n  tokenId?: string,\n)\n")),(0,a.yg)("h3",{id:"response-shape"},"Response Shape"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},"type useNFTType = {\n  currencyLoaded: boolean;\n  error?: any;\n  marketError?: any;\n  data?: NFTObject;\n};\n")),(0,a.yg)("h3",{id:"detailed-response"},"Detailed Response"),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"data.nft")," object contains the majority of the NFT data."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { useNFT } from '@digiv3rse/nft-hooks'\n\n// Getting data for the NFT at contract address 0x8d04...ff63 with id 2\nconst { data, error } = useNFT('0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63', '2')\n\n// The shape for the *data* response\ntype NFTObject = {\n  // data.nft\n  nft?: {\n    tokenId: string;\n    tokenUrlMimeType?: string;\n    contract: {\n      address: ETHAddress;\n      name?: string;\n      description?: string;\n      symbol?: string;\n      imageUri?: string;\n      knownContract?: KNOWN_CONTRACTS;\n    };\n    minted: {\n      address?: ETHAddress;\n      at?: TimedAction;\n    };\n    owner?: {\n      address: ETHAddress;\n    };\n    metadataURI?: string;\n    // DiGi-specific extension but exposed for parsed JSON in contracts\n    contentURI?: string;\n  };\n  media?: {\n    mimeType?: string;\n    source: MEDIA_SOURCES;\n    image?: MediaObject;\n    large?: MediaObject;\n    poster?: MediaObject;\n    thumbnail?: MediaObject;\n    // backwards compatibility\n    content?: MediaObject;\n  };\n  content?: {\n    mimeType?: string;\n    source: MEDIA_SOURCES;\n    original?: MediaObject;\n    large?: MediaObject;\n    poster?: MediaObject;\n    thumbnail?: MediaObject;\n  };\n  metadata?: {\n    name?: string;\n    description?: string;\n    contentUri?: string;\n    imageUri?: string;\n    attributes?: readonly MetadataAttributeType[];\n    // Raw uri or metadata retrieved from the server without normalization\n    raw?: any;\n    // This is context parsing\n    context?: any;\n  };\n  rawData: {\n    [loaderName: string]: any;\n  };\n  nftError?: {\n    error: any;\n    description: string;\n    component: string;\n  };\n  markets?: readonly MarketModule[];\n  events?: readonly NormalizedEvent[];\n};\n\ntype MetadataAttributeType = {\n  name?: string;\n  value?: string;\n  display?: string;\n};\n\ntype MarketModule = AuctionLike | FixedPriceLike | EditionLike;\n\ntype NormalizedEvent = TransferEvent | MarketFixedPriceEvent | MarketAuctionEvent;\n")),(0,a.yg)("br",null),(0,a.yg)("hr",null),(0,a.yg)("h2",{id:"ddkfetchstrategy"},"DDKFetchStrategy"),(0,a.yg)("p",null,"Fetching data using the base ",(0,a.yg)("inlineCode",{parentName:"p"},"DDKFetchStrategy")," for server-side or non-React and has the same response shape as ",(0,a.yg)("inlineCode",{parentName:"p"},"useNFT"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import { Strategies, Networks } from '@digiv3rse/nft-hooks'\n\n// Be careful making multiple instances of the fetch agent\n// Each instance contains a different request cache.\nconst fetchAgent = new Strategies.DDKFetchStrategy(Networks.MAINNET)\n\n// Get result from the server\nconst result = await fetchAgent.fetchNFT(\n  '0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63',\n  '2'\n)\n")),(0,a.yg)("br",null))}p.isMDXComponent=!0}}]);