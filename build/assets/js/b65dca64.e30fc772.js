"use strict";(self.webpackChunkdigi_docusaurus_v_1=self.webpackChunkdigi_docusaurus_v_1||[]).push([[510],{5680:(e,t,r)=>{r.d(t,{xA:()=>p,yg:()=>y});var n=r(6540);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(r),g=o,y=d["".concat(s,".").concat(g)]||d[g]||u[g]||i;return r?n.createElement(y,a(a({ref:t},p),{},{components:r})):n.createElement(y,a({ref:t},p))}));function y(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=g;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[d]="string"==typeof e?e:o,a[1]=c;for(var l=2;l<i;l++)a[l]=r[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},5237:(e,t,r)=>{r.r(t),r.d(t,{contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>s});var n=r(8168),o=(r(6540),r(5680));const i={sidebar_position:5},a="Deploying Contracts",c={unversionedId:"digi-network/contracts",id:"digi-network/contracts",isDocsHomePage:!1,title:"Deploying Contracts",description:"---",source:"@site/docs/digi-network/contracts.mdx",sourceDirName:"digi-network",slug:"/digi-network/contracts",permalink:"/docs/digi-network/contracts",editUrl:"https://github.com/digiv3rse/digi-docs/blob/main/docs/digi-network/contracts.mdx",version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"diginetwork",previous:{title:"API Access",permalink:"/docs/digi-network/api-access"},next:{title:"Connecting MetaMask",permalink:"/docs/digi-network/metamask"}},s=[{value:"Foundry",id:"foundry",children:[{value:"Setup",id:"setup",children:[]},{value:"Deploying",id:"deploying",children:[]},{value:"Verifying",id:"verifying",children:[]}]},{value:"Hardhat",id:"hardhat",children:[{value:"Setup",id:"setup-1",children:[]},{value:"Deploying",id:"deploying-1",children:[]},{value:"Verifying",id:"verifying-1",children:[]}]}],l={toc:s},p="wrapper";function d(e){let{components:t,...r}=e;return(0,o.yg)(p,(0,n.A)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"deploying-contracts"},"Deploying Contracts"),(0,o.yg)("hr",null),(0,o.yg)("p",null,"Deploying contracts can be done with familiar EVM tools like ",(0,o.yg)("a",{parentName:"p",href:"https://hardhat.org/"},"Hardhat")," and ",(0,o.yg)("a",{parentName:"p",href:"https://book.getfoundry.sh/"},"Foundry"),".\nMake sure to configure these tools with the correct chain ID and RPC URL to deploy smart contracts to DiGi Network Goerli and DiGi Network Mainnet. See the ",(0,o.yg)("a",{parentName:"p",href:"/docs/digi-network/network"},"Network Details")," section for more information."),(0,o.yg)("h2",{id:"foundry"},"Foundry"),(0,o.yg)("h3",{id:"setup"},"Setup"),(0,o.yg)("p",null,"See the ",(0,o.yg)("a",{parentName:"p",href:"https://book.getfoundry.sh/"},"Foundry")," documentation to initialize your project with Foundry."),(0,o.yg)("h3",{id:"deploying"},"Deploying"),(0,o.yg)("p",null,"To deploy smart contracts to DiGi Network with Foundry, remember to use the --rpc-url and --chain-id flags with the correct values for the DiGi network you are deploying to. For example, to deploy to DiGi Goerli:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"forge create src/MyContract.sol:MyContract --chain-id 999 --rpc-url https://testnet.rpc.digi.energy/ --private-key $PRIVATE_KEY \n")),(0,o.yg)("p",null,"You can use the same flags for more complicated deploy commands, such as with constructor arguments or a deploy script."),(0,o.yg)("h3",{id:"verifying"},"Verifying"),(0,o.yg)("p",null,"To deploy and verify your contract in one command, use Foundry's verification flags configured with Blockscout and DiGi Network's Blockscout API:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"forge create src/MyContract.sol:MyContract --chain-id 999 --rpc-url https://testnet.rpc.digi.energy/ --private-key $PRIVATE_KEY --verify --verifier blockscout --verifier-url https://testnet.explorer.digi.energy/api\\?\n")),(0,o.yg)("p",null,"You can also verify a pre-existing contract with the ",(0,o.yg)("inlineCode",{parentName:"p"},"forge verify-contract")," command using the same flags (",(0,o.yg)("inlineCode",{parentName:"p"},"--verifier")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"--verifier-url"),")."),(0,o.yg)("p",null,"Note: DiGi uses Blockscout which requires appending ",(0,o.yg)("inlineCode",{parentName:"p"},"\\?")," to the end of the API url like in the example above. More details ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/foundry-rs/foundry/issues/5160"},"here"),"."),(0,o.yg)("p",null,"Alternatively, use Standard JSON Input to verify a pre-existing contract by appending the ",(0,o.yg)("inlineCode",{parentName:"p"},"--show-standard-json-input")," option to ",(0,o.yg)("inlineCode",{parentName:"p"},"forge verify-contract"),", creating a JSON file from the output and uploading that file to the Blockscout UI."),(0,o.yg)("h2",{id:"hardhat"},"Hardhat"),(0,o.yg)("h3",{id:"setup-1"},"Setup"),(0,o.yg)("p",null,"Refer to Hardhat's ",(0,o.yg)("a",{parentName:"p",href:"https://hardhat.org/hardhat-runner/docs/getting-started#quick-start"},"Quick Start")," guide to install Hardhat and initialize your project.\nTo configure your project, add the DiGi Network information in ",(0,o.yg)("inlineCode",{parentName:"p"},"hardhat.config.js"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-js"},"import { HardhatUserConfig } from 'hardhat/config';\nimport '@nomicfoundation/hardhat-toolbox';\n\nrequire('dotenv').config();\n\nconst config: HardhatUserConfig = {\n  solidity: {\n    version: '0.8.17',\n  },\n  networks: {\n    // for testnet\n    'digi-goerli': {\n      url: 'https://testnet.rpc.digi.energy/',\n      accounts: [process.env.WALLET_KEY as string],\n    },\n    // for mainnet\n    'digi-mainnet': {\n      url: 'https://rpc.digi.energy/',\n      accounts: [process.env.WALLET_KEY as string],\n    },\n  },\n  defaultNetwork: 'hardhat',\n};\n\nexport default config;\n")),(0,o.yg)("h3",{id:"deploying-1"},"Deploying"),(0,o.yg)("p",null,"Once you've configured your Hardhat project to work with DiGi Network, you can proceed with the Hardhat guide to compile, test, and deploy your contracts."),(0,o.yg)("h3",{id:"verifying-1"},"Verifying"),(0,o.yg)("p",null,"DiGi Network uses Blockscout for chain exploration and contract verification. See Blockscout's ",(0,o.yg)("a",{parentName:"p",href:"https://docs.blockscout.com/for-users/verifying-a-smart-contract/hardhat-verification-plugin"},"Hardhat plugin guide")," to verify contracts with Hardhat and Blockscout."))}d.isMDXComponent=!0}}]);