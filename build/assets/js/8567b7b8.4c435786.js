"use strict";(self.webpackChunkdigi_docusaurus_v_1=self.webpackChunkdigi_docusaurus_v_1||[]).push([[5076],{5680:(e,t,n)=>{n.d(t,{xA:()=>d,yg:()=>f});var r=n(6540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=l(n),m=o,f=p["".concat(c,".").concat(m)]||p[m]||u[m]||a;return n?r.createElement(f,i(i({ref:t},d),{},{components:n})):r.createElement(f,i({ref:t},d))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(8168),o=(n(6540),n(5680));const a={id:"usenftcontent",title:"useNFTContent",sidebar_position:4},i=void 0,s={unversionedId:"developer-tools/nft-hooks/usenftcontent",id:"developer-tools/nft-hooks/usenftcontent",isDocsHomePage:!1,title:"useNFTContent",description:"Fetches content for rendering from content URL in the NFT metadata",source:"@site/docs/developer-tools/nft-hooks/usenftcontent.mdx",sourceDirName:"developer-tools/nft-hooks",slug:"/developer-tools/nft-hooks/usenftcontent",permalink:"/build/index.html/docs/developer-tools/nft-hooks/usenftcontent",editUrl:"https://github.com/digiv3rse/digi-docs/blob/main/docs/developer-tools/nft-hooks/usenftcontent.mdx",version:"current",sidebarPosition:4,frontMatter:{id:"usenftcontent",title:"useNFTContent",sidebar_position:4},sidebar:"devtools",previous:{title:"useNFTMetadata",permalink:"/build/index.html/docs/developer-tools/nft-hooks/usenftmetadata"}},c=[{value:"Interface",id:"interface",children:[]},{value:"Response",id:"response",children:[]},{value:"Code Example",id:"code-example",children:[]},{value:"MediaFetchAgent",id:"mediafetchagent",children:[]}],l={toc:c},d="wrapper";function p(e){let{components:t,...n}=e;return(0,o.yg)(d,(0,r.A)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h5",{id:"fetches-content-for-rendering-from-content-url-in-the-nft-metadata"},"Fetches content for rendering from content URL in the NFT metadata"),(0,o.yg)("hr",null),(0,o.yg)("p",null,"This hook makes a request to fetch content (image, video, etc) based on an NFT's metadata."),(0,o.yg)("p",null,"Most metadata servers allow remote JSON fetches. However, there is a chance this request could fail.\nRequests are set with a 10 second timeout to allow showing the user\nan error message instead of an indefinite loader."),(0,o.yg)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.yg)("div",{parentName:"div",className:"admonition-heading"},(0,o.yg)("h5",{parentName:"div"},(0,o.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,o.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.yg)("div",{parentName:"div",className:"admonition-content"},(0,o.yg)("p",{parentName:"div"},"The same information can be fetched using the base ",(0,o.yg)("a",{parentName:"p",href:"./usenftcontent#mediafetchagent"},(0,o.yg)("inlineCode",{parentName:"a"},"MediaFetchAgent"))," for server-side or non-React use. "))),(0,o.yg)("hr",null),(0,o.yg)("h3",{id:"interface"},"Interface"),(0,o.yg)("p",null,"To use the hook, simply pass in the ",(0,o.yg)("inlineCode",{parentName:"p"},"contentURI")," from the NFT's metadata and ",(0,o.yg)("inlineCode",{parentName:"p"},"mimeType")," (image, video, audio etc).\nYou can learn more about MIME types ",(0,o.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types"},"here"),"."),(0,o.yg)("p",null,"If you do not have access to ",(0,o.yg)("inlineCode",{parentName:"p"},"mimeType")," from the metadata or do not wish to retrieve the metadata, it\ncan be omitted with a small performance impact."),(0,o.yg)("p",null,"Content returned from this hook is ",(0,o.yg)("strong",{parentName:"p"},"NOT CACHED"),", meaning that each time the hook is used the content will be fetched."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},"/**\n * @param uri URI of content to load or return URI for\n * @param mimeType MIME type expected for content\n * @returns useNFTContentType\n */\n\nfunction useNFTContent(\n  uri?: string,\n  mimeType?: string,\n)\n")),(0,o.yg)("h3",{id:"response"},"Response"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},"type useNFTContentType = {\n  error?: string;\n  content?: MediaContentType;\n}\n\ntype MediaContentType =\n  | { uri: string; type: 'uri'; mimeType: string }\n  | { text: string; type: 'text'; mimeType: string };\n")),(0,o.yg)("h3",{id:"code-example"},"Code Example"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-typescript"},"import { useNFTContent } from '@digiv3rse/nft-hooks'\n\nconst MyMediaData = ({ uri: string, mimeType: string }) => {\n  const { error, content } = useNFTContent(uri, mimeType)\n\n  if (error) {\n    return <div>Error fetching content</div>\n  }\n\n  if (loading) {\n    return <div>loading...</div>\n  }\n\n  if (content.type === 'text') {\n    return <div>{content.text}</div>\n  }\n  if (content.mimeType.startsWith('audio')) {\n    return <audio src={content.uri} />\n  }\n  if (content.mimeType.startsWith('video')) {\n    return <video src={content.uri} />\n  }\n  if (content.mimeType.startsWith('image')) {\n    return <img src={content.uri} />\n  }\n  return <div>unknown: {content.mimeType}</div>\n}\n")),(0,o.yg)("hr",null),(0,o.yg)("h2",{id:"mediafetchagent"},"MediaFetchAgent"),(0,o.yg)("p",null,"Alternatively, the same information can be fetched using the base ",(0,o.yg)("inlineCode",{parentName:"p"},"MediaFetchAgent")," for server-side or non-React use:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-typescript"},"import { MediaFetchAgent, Networks } from '@digiv3rse/nft-hooks'\n\nconst fetchAgent = new MediaFetchAgent(Networks.MAINNET)\n\n// Get result from the server\nconst result = await fetchAgent.fetchContent(\n  'https://ipfs.io/ipfs/METADATA_HASH',\n  'application/json'\n)\n// result type is MediaContentType\n")),(0,o.yg)("br",null))}p.isMDXComponent=!0}}]);