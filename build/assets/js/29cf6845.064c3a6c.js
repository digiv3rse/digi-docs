"use strict";(self.webpackChunkdigi_docusaurus_v_1=self.webpackChunkdigi_docusaurus_v_1||[]).push([[6484],{5680:(e,t,a)=>{a.d(t,{xA:()=>c,yg:()=>f});var n=a(6540);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=n.createContext({}),l=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=l(e.components);return n.createElement(d.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,d=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=l(a),m=r,f=p["".concat(d,".").concat(m)]||p[m]||u[m]||o;return a?n.createElement(f,i(i({ref:t},c),{},{components:a})):n.createElement(f,i({ref:t},c))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=m;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s[p]="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=a[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},4328:(e,t,a)=>{a.r(t),a.d(t,{contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var n=a(8168),r=(a(6540),a(5680));const o={id:"usenftmetadata",title:"useNFTMetadata",sidebar_position:3},i=void 0,s={unversionedId:"developer-tools/nft-hooks/usenftmetadata",id:"developer-tools/nft-hooks/usenftmetadata",isDocsHomePage:!1,title:"useNFTMetadata",description:"Fetches NFT metadata from a URL",source:"@site/docs/developer-tools/nft-hooks/usenftmetadata.mdx",sourceDirName:"developer-tools/nft-hooks",slug:"/developer-tools/nft-hooks/usenftmetadata",permalink:"/docs/developer-tools/nft-hooks/usenftmetadata",editUrl:"https://github.com/digiv3rse/digi-docs/blob/main/docs/developer-tools/nft-hooks/usenftmetadata.mdx",version:"current",sidebarPosition:3,frontMatter:{id:"usenftmetadata",title:"useNFTMetadata",sidebar_position:3},sidebar:"devtools",previous:{title:"useNFT",permalink:"/docs/developer-tools/nft-hooks/useNft"},next:{title:"useNFTContent",permalink:"/docs/developer-tools/nft-hooks/usenftcontent"}},d=[{value:"Interface",id:"interface",children:[]},{value:"Response Shape",id:"response-shape",children:[]},{value:"Code Example",id:"code-example",children:[]},{value:"MediaFetchAgent",id:"mediafetchagent",children:[]}],l={toc:d},c="wrapper";function p(e){let{components:t,...a}=e;return(0,r.yg)(c,(0,n.A)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h5",{id:"fetches-nft-metadata-from-a-url"},"Fetches NFT metadata from a URL"),(0,r.yg)("hr",null),(0,r.yg)("p",null,"This hook makes a request to fetch metadata from an NFT's ",(0,r.yg)("inlineCode",{parentName:"p"},"metadataURI"),"."),(0,r.yg)("p",null,"Most metadata servers allow for remote JSON fetches, however, there is a chance this request could fail.\nRequests are set with a 10 second timeout to allow showing the user an error message\ninstead of an indefinite loader."),(0,r.yg)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.yg)("div",{parentName:"div",className:"admonition-heading"},(0,r.yg)("h5",{parentName:"div"},(0,r.yg)("span",{parentName:"h5",className:"admonition-icon"},(0,r.yg)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.yg)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.yg)("div",{parentName:"div",className:"admonition-content"},(0,r.yg)("p",{parentName:"div"},"The same information can be fetched using the base ",(0,r.yg)("a",{parentName:"p",href:"./usenftmetadata#mediafetchagent"},(0,r.yg)("inlineCode",{parentName:"a"},"MediaFetchAgent"))," for server-side or non-React use. "))),(0,r.yg)("hr",null),(0,r.yg)("h3",{id:"interface"},"Interface"),(0,r.yg)("p",null,"Pass in the metadata URL to fetch the NFT data:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-ts"},"/**\n * @param uri URI of metadata to fetch\n * @returns @type useNFTMetadataType\n */\nexport function useNFTMetadata(\n  uri?: string,\n)\n")),(0,r.yg)("h3",{id:"response-shape"},"Response Shape"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"type useNFTMetadataType = {\n  error?: string // Error: can be thrown from invalid json, unparsable json, network request failure, network request timeout\n  loading?: boolean // Easy indicator to determine if the NFT metadata is loading. Same as (!metadata && !error).\n  metadata?: any // Raw metadata based on the URI passed in\n}\n")),(0,r.yg)("h3",{id:"code-example"},"Code Example"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import { useNFTMetadata } from '@digiv3rse/nft-hooks'\n\nconst MediaDataDisplay = ({ uri: string }) => {\n  const { error, metadata } = useNFTMetadata(uri)\n\n  if (metadata) {\n    return (\n      <div>\n        <h2>Name: {metadata.name}</h2>\n        <p>{metadata.description}</p>\n      </div>\n    )\n  }\n\n  if (error) {\n    return <div>Error loading metadata</div>\n  }\n  return <div>metadata loading...</div>\n}\n")),(0,r.yg)("br",null),(0,r.yg)("hr",null),(0,r.yg)("h2",{id:"mediafetchagent"},"MediaFetchAgent"),(0,r.yg)("p",null,"Alternatively, the same information can be fetched using the base ",(0,r.yg)("inlineCode",{parentName:"p"},"MediaFetchAgent")," for server-side or non-React use."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"import { MediaFetchAgent, Networks } from '@digiv3rse/nft-hooks'\n\n// Be careful making multiple instances of the fetch agent\n// Each instance contains a different request cache.\nconst fetchAgent = new MediaFetchAgent(Networks.MAINNET)\n\n// Get result from the server\nconst result = await fetchAgent.fetchIPFSMetadata('https://ipfs.io/ipfs/METADATA_HASH')\n// result type is {metadata}\n")),(0,r.yg)("br",null))}p.isMDXComponent=!0}}]);