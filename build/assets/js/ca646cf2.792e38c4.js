"use strict";(self.webpackChunkdigi_docusaurus_v_1=self.webpackChunkdigi_docusaurus_v_1||[]).push([[8076],{5680:(e,t,r)=>{r.d(t,{xA:()=>l,yg:()=>g});var n=r(6540);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),d=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},l=function(e){var t=d(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=d(r),u=a,g=p["".concat(c,".").concat(u)]||p[u]||m[u]||i;return r?n.createElement(g,o(o({ref:t},l),{},{components:r})):n.createElement(g,o({ref:t},l))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:a,o[1]=s;for(var d=2;d<i;d++)o[d]=r[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},4030:(e,t,r)=>{r.r(t),r.d(t,{contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=r(8168),a=(r(6540),r(5680));const i={},o=void 0,s={unversionedId:"smart-contracts/creator-tools/EditionMetadataRenderer",id:"smart-contracts/creator-tools/EditionMetadataRenderer",isDocsHomePage:!1,title:"EditionMetadataRenderer",description:"Metadata rendering contract for NFTs with all the same media assets",source:"@site/docs/smart-contracts/creator-tools/EditionMetadataRenderer.mdx",sourceDirName:"smart-contracts/creator-tools",slug:"/smart-contracts/creator-tools/EditionMetadataRenderer",permalink:"/docs/smart-contracts/creator-tools/EditionMetadataRenderer",editUrl:"https://github.com/digiv3rse/digi-docs/blob/main/docs/smart-contracts/creator-tools/EditionMetadataRenderer.mdx",version:"current",frontMatter:{},sidebar:"createtools",previous:{title:"ERC721Drop",permalink:"/docs/smart-contracts/creator-tools/ERC721Drop"},next:{title:"JSONExtensionRegistry",permalink:"/docs/smart-contracts/creator-tools/JSONExtensionRegistry"}},c=[{value:"updateMediaURIs",id:"updatemediauris",children:[]},{value:"updateDescription",id:"updatedescription",children:[]}],d={toc:c},l="wrapper";function p(e){let{components:t,...r}=e;return(0,a.yg)(l,(0,n.A)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h5",{id:"metadata-rendering-contract-for-nfts-with-all-the-same-media-assets"},"Metadata rendering contract for NFTs with all the same media assets"),(0,a.yg)("hr",null),(0,a.yg)("p",null,"This contract is in charge of managing and rendering the metadata for DiGi editions.\nAn edition is an NFT collection where all the NFTs share the same media asset (video, image, etc)."),(0,a.yg)("p",null,"Whenever a ",(0,a.yg)("inlineCode",{parentName:"p"},"tokenURI")," is called on the NFT contract, the call is forwarded to this contract to get metadata for a specific NFT."),(0,a.yg)("p",null,"View the source contract code ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/digiv3rse/digi-drops-contracts/blob/main/src/metadata/EditionMetadataRenderer.sol"},"here")," and the list of deployed contract addresses ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/digiv3rse/digi-drops-contracts/tree/main/deployments"},"here"),"."),(0,a.yg)("h2",{id:"updatemediauris"},"updateMediaURIs"),(0,a.yg)("p",null,"Updates the media asset for the edition. "),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"target"),": The contract address to update metadata for"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"imageURI"),": The new media uri"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"animationURI"),": The new animation uri")),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"imageURI")," is the resource for the main piece of media and ",(0,a.yg)("inlineCode",{parentName:"p"},"animationURI")," is used for the thumbnail if a video. "),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"function updateMediaURIs(\n    address target,\n    string memory imageURI,\n    string memory animationURI\n)\n")),(0,a.yg)("h2",{id:"updatedescription"},"updateDescription"),(0,a.yg)("p",null,"Updates the description for the edition. "),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"target"),": The contract address to update the description for"),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"newDescription"),": The new description")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"function updateDescription(address target, string memory newDescription)\n")))}p.isMDXComponent=!0}}]);