"use strict";(self.webpackChunkdigi_docusaurus_v_1=self.webpackChunkdigi_docusaurus_v_1||[]).push([[5022],{5680:(e,t,a)=>{a.d(t,{xA:()=>l,yg:()=>g});var r=a(6540);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var d=r.createContext({}),c=function(e){var t=r.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},l=function(e){var t=c(e.components);return r.createElement(d.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,d=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=c(a),m=n,g=p["".concat(d,".").concat(m)]||p[m]||u[m]||o;return a?r.createElement(g,i(i({ref:t},l),{},{components:a})):r.createElement(g,i({ref:t},l))}));function g(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=m;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s[p]="string"==typeof e?e:n,i[1]=s;for(var c=2;c<o;c++)i[c]=a[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},9469:(e,t,a)=>{a.r(t),a.d(t,{contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var r=a(8168),n=(a(6540),a(5680));const o={},i=void 0,s={unversionedId:"smart-contracts/creator-tools/DropMetadataRenderer",id:"smart-contracts/creator-tools/DropMetadataRenderer",isDocsHomePage:!1,title:"DropMetadataRenderer",description:"Metadata rendering contract for NFTs with individual media assets",source:"@site/docs/smart-contracts/creator-tools/DropMetadataRenderer.mdx",sourceDirName:"smart-contracts/creator-tools",slug:"/smart-contracts/creator-tools/DropMetadataRenderer",permalink:"/build/index.html/docs/smart-contracts/creator-tools/DropMetadataRenderer",editUrl:"https://github.com/digiv3rse/digi-docs/blob/main/docs/smart-contracts/creator-tools/DropMetadataRenderer.mdx",version:"current",frontMatter:{},sidebar:"createtools",previous:{title:"JSONExtensionRegistry",permalink:"/build/index.html/docs/smart-contracts/creator-tools/JSONExtensionRegistry"}},d=[{value:"updateMetadataBase",id:"updatemetadatabase",children:[]},{value:"updateMetadataBaseWithDetails",id:"updatemetadatabasewithdetails",children:[]},{value:"updateProvenanceHash",id:"updateprovenancehash",children:[]}],c={toc:d},l="wrapper";function p(e){let{components:t,...a}=e;return(0,n.yg)(l,(0,r.A)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h5",{id:"metadata-rendering-contract-for-nfts-with-individual-media-assets"},"Metadata rendering contract for NFTs with individual media assets"),(0,n.yg)("hr",null),(0,n.yg)("p",null,"This contract is in charge of managing and rendering the metadata for DiGi drops.\nA drop is an NFT collection where all the NFTs have individual media assets. "),(0,n.yg)("p",null,"Whenever a ",(0,n.yg)("inlineCode",{parentName:"p"},"tokenURI")," is called on an NFT contract it is forwarded to this contract to get metadata for a specific NFT."),(0,n.yg)("p",null,"View the source contract code ",(0,n.yg)("a",{parentName:"p",href:"https://github.com/digiv3rse/digi-drops-contracts/blob/main/src/metadata/DropMetadataRenderer.sol"},"here")," and the list of deployed contract addresses ",(0,n.yg)("a",{parentName:"p",href:"https://github.com/digiv3rse/digi-drops-contracts/tree/main/deployments"},"here"),"."),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"baseURI"),": A common base path that all the assets share and can append the tokenId to the end to get the metadata for an NFT."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"contractURI"),": A resource for getting metadata for the contract. Follows the contract-level metadata format described ",(0,n.yg)("a",{parentName:"li",href:"https://docs.opensea.io/docs/contract-level-metadata"},"here"),"."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"provenanceHash"),": A hash that is used to prove that the order of the images and metadata was set pre-mint, and was not manipulated."),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"target"),": The address of the NFT contract to get data for.")),(0,n.yg)("h2",{id:"updatemetadatabase"},"updateMetadataBase"),(0,n.yg)("p",null,"Updates the baseURI and contractURI."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre"},"function updateMetadataBase(\n    address target,\n    string memory baseUri,\n    string memory newContractUri\n)\n")),(0,n.yg)("h2",{id:"updatemetadatabasewithdetails"},"updateMetadataBaseWithDetails"),(0,n.yg)("p",null,"Updates the metadata base URI, extension, contract URI and freezing details."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre"},"function updateMetadataBaseWithDetails(\n    address target,\n    string memory metadataBase,\n    string memory metadataExtension,\n    string memory newContractURI,\n    uint256 freezeAt\n)\n")),(0,n.yg)("h2",{id:"updateprovenancehash"},"updateProvenanceHash"),(0,n.yg)("p",null,"Updates the provenance hash stored in the contract. "),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre"},"function updateProvenanceHash(address target, bytes32 provenanceHash)\n")))}p.isMDXComponent=!0}}]);